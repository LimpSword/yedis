#include <cassert>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cerrno>
#include <fcntl.h>
#include <poll.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <iostream>
#include <ostream>
#include <unordered_map>
#include <vector>

#include "include/buffer.h"
#include "include/commands.h"


static void fd_set_nonblocking(const int fd) {
    errno = 0;
    int flags = fcntl(fd, F_GETFL, 0);
    if (errno) {
        perror("fcntl error");
        return;
    }

    flags |= O_NONBLOCK;

    errno = 0;
    fcntl(fd, F_SETFL, flags);
    if (errno) {
        perror("fcntl error");
    }
}

constexpr size_t k_max_msg = 32 << 20;

struct Conn {
    int fd = -1;
    // application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    Buffer incoming; // data to be parsed by the application
    Buffer outgoing; // responses generated by the application
};

static Conn *handle_accept(const int fd) {
    sockaddr_in client_addr = {};
    socklen_t addrlen = sizeof(client_addr);
    int connfd = accept(fd, reinterpret_cast<struct sockaddr *>(&client_addr), &addrlen);
    if (connfd < 0) {
        perror("accept");
        return nullptr;
    }
    const uint32_t ip = client_addr.sin_addr.s_addr;
    fprintf(stderr, "new client from %u.%u.%u.%u:%u\n",
            ip & 255, (ip >> 8) & 255, (ip >> 16) & 255, ip >> 24,
            ntohs(client_addr.sin_port)
    );

    // set the new connection fd to nonblocking mode
    fd_set_nonblocking(connfd);

    const auto conn = new Conn();
    conn->fd = connfd;
    conn->want_read = true;
    return conn;
}

std::unordered_map<std::string, std::string> g_db;

static bool try_one_request(Conn *conn) {
    // Message Header
    if (conn->incoming.size() < 4) {
        // we haven't read enough
        return false;
    }
    uint32_t len = 0;
    memcpy(&len, conn->incoming.data().data(), 4);
    if (len > k_max_msg) {
        std::cout << "message too long" << std::endl;
        conn->want_close = true;
        return false;
    }
    // Message Body
    if (4 + len > conn->incoming.size()) {
        // we haven't read enough
        return false;
    }
    const auto *request = conn->incoming.data().data() + 4;

    const std::string_view msg(reinterpret_cast<const char *>(request), len);
    std::string response;
    uint32_t res_len = 0;
    switch (auto [name, args] = parse_command(msg); name) {
        case k_get:
            if (args.size() != 1) {
                std::cout << "invalid get command" << std::endl;
                break;
            }
            if (const auto it = g_db.find(args[0]); it != g_db.end()) {
                std::cout << "found " << it->first << " " << it->second << std::endl;
                response = it->second;
            } else {
                response = "nil";
            }
            break;
        case k_set:
            if (args.size() != 2) {
                std::cout << "invalid set command" << std::endl;
                break;
            }
            g_db[args[0]] = args[1];
            response = "ok";
            break;
        case k_del:
            if (args.size() != 1) {
                std::cout << "invalid del command" << std::endl;
                break;
            }
            g_db.erase(args[0]);
            response = "ok";
            break;
        default:
            std::cout << "invalid command" << std::endl;
            response = "invalid command";
    }

    res_len = static_cast<uint32_t>(response.size());
    if (res_len > 0) {
        conn->outgoing.append(reinterpret_cast<const uint8_t *>(&res_len), 4);
        conn->outgoing.append(reinterpret_cast<const uint8_t *>(response.data()), res_len);
    }

    printf("client says: len:%d data:%.*s\n", len, static_cast<int>(msg.length()), msg.data());
    printf("response: len:%d data:%s\n", res_len, response.data());

    // Remove the request message
    conn->incoming.consume(4 + len);
    return true;
}

static void handle_write(Conn *conn) {
    assert(!conn->outgoing.empty());
    const ssize_t rv = write(conn->fd, conn->outgoing.data().data(), conn->outgoing.data().size());
    if (rv < 0 && errno == EAGAIN) {
        return; // actually not ready
    }
    if (rv < 0) {
        perror("write()");
        conn->want_close = true;
        return;
    }

    // remove written data from `outgoing`
    conn->outgoing.consume(static_cast<size_t>(rv));

    if (conn->outgoing.empty()) {
        // all data written
        conn->want_read = true;
        conn->want_write = false;
    }
}

static void handle_read(Conn *conn) {
    uint8_t buf[64 * 1024];
    const ssize_t rv = read(conn->fd, buf, sizeof(buf));
    if (rv < 0 && errno == EAGAIN) {
        return; // actually not ready
    }
    if (rv < 0) {
        perror("read()");
        conn->want_close = true;
        return;
    }
    // handle EOF
    if (rv == 0) {
        if (conn->incoming.empty()) {
            std::cout << "client closed" << std::endl;
        } else {
            std::cout << "client closed with data" << std::endl;
        }
        conn->want_close = true;
        return;
    }

    conn->incoming.append(buf, static_cast<size_t>(rv));

    // parse requests and generate responses
    while (try_one_request(conn)) {
    }

    // update the readiness intention
    if (!conn->outgoing.empty()) {
        // has a response
        conn->want_read = false;
        conn->want_write = true;
        // The socket is likely ready to write in a request-response protocol,
        // try to write it without waiting for the next iteration.
        return handle_write(conn);
    }
}

int main() {
    const int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0) {
        perror("socket()");
        return 1;
    }
    constexpr int val = 1;
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));

    // bind
    sockaddr_in addr = {};
    addr.sin_family = AF_INET;
    addr.sin_port = ntohs(29863);
    addr.sin_addr.s_addr = ntohl(INADDR_ANY);
    int rv = bind(fd, reinterpret_cast<const sockaddr *>(&addr), sizeof(addr));
    if (rv) {
        perror("bind()");
        return 1;
    }

    // set the listen fd to nonblocking mode
    fd_set_nonblocking(fd);

    rv = listen(fd, SOMAXCONN);
    if (rv) {
        perror("listen()");
        return 1;
    }

    std::vector<Conn *> fd2conn;
    std::vector<pollfd> poll_args;
    while (true) {
        poll_args.clear();
        // put the listening sockets in the first position
        pollfd pfd = {fd, POLLIN, 0};
        poll_args.push_back(pfd);
        // the rest are connection sockets
        for (const Conn *conn: fd2conn) {
            if (!conn) {
                continue;
            }
            // always poll() for error
            pollfd pfd = {conn->fd, POLLERR, 0};
            // poll() flags from the application's intent
            if (conn->want_read) {
                pfd.events |= POLLIN;
            }
            if (conn->want_write) {
                pfd.events |= POLLOUT;
            }
            poll_args.push_back(pfd);
        }

        // wait for readiness
        int rv = poll(poll_args.data(), (nfds_t) poll_args.size(), -1);
        if (rv < 0 && errno == EINTR) {
            continue; // not an error
        }
        if (rv < 0) {
            perror("poll()");
            return 1;
        }

        // handle the listening socket
        if (poll_args[0].revents) {
            if (Conn *conn = handle_accept(fd)) {
                // put it into the map
                if (fd2conn.size() <= static_cast<size_t>(conn->fd)) {
                    fd2conn.resize(conn->fd + 1);
                }
                assert(!fd2conn[conn->fd]);
                fd2conn[conn->fd] = conn;
            }
        }

        // handle connection sockets
        for (size_t i = 1; i < poll_args.size(); ++i) {
            // note: skip the 1st
            const uint32_t ready = poll_args[i].revents;
            if (ready == 0) {
                continue;
            }

            Conn *conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN) {
                assert(conn->want_read);
                handle_read(conn);
            }
            if (ready & POLLOUT) {
                assert(conn->want_write);
                handle_write(conn);
            }

            // close the socket from socket error or application logic
            if ((ready & POLLERR) || conn->want_close) {
                (void) close(conn->fd);
                fd2conn[conn->fd] = nullptr;
                delete conn;
            }
        }
    }
}
